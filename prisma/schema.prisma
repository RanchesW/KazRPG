generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model bookings {
  id          String   @id
  status      String   @default("PENDING")
  playerCount Int      @default(1)
  message     String?
  totalPrice  Int?
  userId      String
  gameId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  games       games    @relation(fields: [gameId], references: [id])
  users       users    @relation(fields: [userId], references: [id])

  @@unique([userId, gameId])
}

model games {
  id              String     @id
  title           String
  description     String
  gameSystem      String
  platform        String?
  maxPlayers      Int
  currentPlayers  Int        @default(0)
  pricePerSession Int?
  duration        Int?
  difficulty      String
  tags            String
  imageUrl        String?
  isOnline        Boolean    @default(true)
  city            String?
  address         String?
  startDate       DateTime
  endDate         DateTime?
  isRecurring     Boolean    @default(false)
  language        String     @default("RU")
  isActive        Boolean    @default(true)
  gmId            String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime
  bookings        bookings[]
  users           users      @relation(fields: [gmId], references: [id])
  payments        payments[]
  reviews         reviews[]
}

model payments {
  id               String    @id
  userId           String
  gameId           String
  amount           Int
  currency         String    @default("KZT")
  status           String    @default("PENDING")
  description      String?
  provider         String    @default("KAZKOM")
  externalId       String?
  paymentUrl       String?
  errorMessage     String?
  completedAt      DateTime?
  refundedAt       DateTime?
  verificationData String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  games            games     @relation(fields: [gameId], references: [id])
  users            users     @relation(fields: [userId], references: [id])
}

model reviews {
  id                            String   @id
  rating                        Int
  comment                       String?
  authorId                      String
  targetId                      String
  gameId                        String
  createdAt                     DateTime @default(now())
  games                         games    @relation(fields: [gameId], references: [id])
  users_reviews_targetIdTousers users    @relation("reviews_targetIdTousers", fields: [targetId], references: [id])
  users_reviews_authorIdTousers users    @relation("reviews_authorIdTousers", fields: [authorId], references: [id])

  @@unique([authorId, targetId, gameId])
}

model users {
  id                              String     @id
  email                           String     @unique
  username                        String     @unique
  firstName                       String
  lastName                        String
  avatar                          String?
  bio                             String?
  city                            String?
  timezone                        String     @default("Asia/Almaty")
  language                        String     @default("RU")
  isGM                            Boolean    @default(false)
  isVerified                      Boolean    @default(false)
  experience                      String     @default("BEGINNER")
  rating                          Float      @default(0)
  reviewCount                     Int        @default(0)
  hashedPassword                  String
  emailVerified                   Boolean    @default(false)
  createdAt                       DateTime   @default(now())
  updatedAt                       DateTime
  bookings                        bookings[]
  games                           games[]
  payments                        payments[]
  reviews_reviews_targetIdTousers reviews[]  @relation("reviews_targetIdTousers")
  reviews_reviews_authorIdTousers reviews[]  @relation("reviews_authorIdTousers")
}
