import { PrismaClient, GameSystem, Difficulty } from '@prisma/client'
import { generateGameSlug } from '../src/lib/slug'
import { createGameWithSlug } from '../src/lib/slug-queries'

const prisma = new PrismaClient()

async function createSampleGames() {
  try {
    console.log('–°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ì–ú...')
    
    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ì–ú
    const gm = await prisma.user.upsert({
      where: { email: 'gm@kazrpg.com' },
      update: {},
      create: {
        id: 'gm-user-id',
        email: 'gm@kazrpg.com',
        username: 'MasterGM',
        firstName: '–ò–≥–æ—Ä—å',
        lastName: '–°–º–∏—Ä–Ω–æ–≤',
        hashedPassword: 'hashed-password',
        isGM: true,
        city: '–ê–ª–º–∞—Ç—ã',
        bio: '–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä',
      },
    })

    console.log('–°–æ–∑–¥–∞—ë–º –∏–≥—Ä—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ URL...')

    const games = [
      {
        title: '–î—Ä–∞–∫–æ–Ω—ã –∏ –ü–æ–¥–∑–µ–º–µ–ª—å—è: –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –ê–ª–º–∞—Ç—ã',
        description: '–≠–ø–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –º–∏—Ä–µ D&D 5e –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –ê–ª–º–∞—Ç—ã',
        gameSystem: 'DND5E' as GameSystem,
        city: '–ê–ª–º–∞—Ç—ã',
        difficulty: 'INTERMEDIATE' as Difficulty,
        tags: '—Ñ—ç–Ω—Ç–µ–∑–∏,–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è,–≥–æ—Ä–æ–¥—Å–∫–∞—è'
      },
      {
        title: 'Pathfinder: –ü—É—Ç—å –∫ –ê—Å—Ç–∞–Ω–µ',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ fantasy –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ –≤ —Å—Ç–æ–ª–∏—Ü—É',
        gameSystem: 'PATHFINDER' as GameSystem,
        city: '–ê—Å—Ç–∞–Ω–∞',
        difficulty: 'ADVANCED' as Difficulty,
        tags: '—Ñ—ç–Ω—Ç–µ–∑–∏,–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ,–ø–æ–ª–∏—Ç–∏–∫–∞'
      },
      {
        title: 'Call of Cthulhu: –¢–∞–π–Ω—ã –®—ã–º–∫–µ–Ω—Ç–∞',
        description: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –≤ —é–∂–Ω–æ–π —Å—Ç–æ–ª–∏—Ü–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
        gameSystem: 'CALL_OF_CTHULHU' as GameSystem,
        city: '–®—ã–º–∫–µ–Ω—Ç',
        difficulty: 'INTERMEDIATE' as Difficulty,
        tags: '—Ö–æ—Ä—Ä–æ—Ä,–¥–µ—Ç–µ–∫—Ç–∏–≤,–º–∏—Å—Ç–∏–∫–∞'
      },
      {
        title: 'Vampire: The Masquerade - –ù–æ—á–∏ –ö–∞—Ä–∞–≥–∞–Ω–¥—ã',
        description: '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç—Ä–∏–≥–∏ –≤–∞–º–ø–∏—Ä–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ',
        gameSystem: 'VAMPIRE' as GameSystem,
        city: '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞',
        difficulty: 'ADVANCED' as Difficulty,
        tags: '–≤–∞–º–ø–∏—Ä—ã,–ø–æ–ª–∏—Ç–∏–∫–∞,–¥—Ä–∞–º–∞'
      },
      {
        title: 'GURPS: –ö–æ—Å–º–æ–ø–æ—Ä—Ç –ë–∞–π–∫–æ–Ω—É—Ä',
        description: '–ù–∞—É—á–Ω–æ-—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ—Å–º–æ–¥—Ä–æ–º–µ',
        gameSystem: 'GURPS' as GameSystem,
        city: '–ë–∞–π–∫–æ–Ω—É—Ä',
        difficulty: 'BEGINNER' as Difficulty,
        tags: '–Ω–∞—É—á–Ω–∞—è-—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞,–∫–æ—Å–º–æ—Å,–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'
      }
    ]

    for (const gameData of games) {
      const slug = generateGameSlug(gameData.title, gameData.gameSystem, gameData.city)
      
      const gameId = await createGameWithSlug({
        title: gameData.title,
        description: gameData.description,
        gameSystem: gameData.gameSystem,
        maxPlayers: 4,
        currentPlayers: Math.floor(Math.random() * 3),
        pricePerSession: Math.floor(Math.random() * 5000) + 2000,
        duration: 240, // 4 —á–∞—Å–∞
        difficulty: gameData.difficulty,
        tags: gameData.tags,
        city: gameData.city,
        startDate: new Date(Date.now() + Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),
        language: 'RU',
        isOnline: Math.random() > 0.5,
        gmId: gm.id,
        slug: slug
      })

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞: ${gameData.title}`)
      console.log(`   URL: /games/${slug}`)
      console.log('')
    }

    console.log('üéâ –í—Å–µ –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createSampleGames()
